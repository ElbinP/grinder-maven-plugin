= Introduction = 

    The plugin consists of goals:
       * agent
       * report
       * console
       * TCPProxy

    In order to run goal from shell:
       # open a command-line shell;
       # cd into the Maven project directory;
       # execute the command *mvn com.fides:grinderplugin:0.0.1-SNAPSHOT:* followed by goal name;

    For example, to run agent goal use the following command line:
{{{
    mvn com.fides:grinderplugin:0.0.1-SNAPSHOT:agent
}}}

    To run goals on Eclipse platform, set *Run Configuration* of your Maven project creating one Maven build for each goal as follow:
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:agent
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:report
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:console
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:TCPProxy

    The first step of each goal run is create plugin configuration directory *target/test/config* (if do not exists) in the local directory of your Maven project. 
    Directory contents:
       * *grinder_agent.properties* -- the grinder properties configured;
       * *jython test* -- copy of the jython test configured;

== Agent ==
    
    _Agent.java_ class implement agent goal.

    Create log direcetory *target/test/log_files* and run the grinder agent process that copy here all log files generated.

    This goal can be run independently of the other.

== Report ==
Per default, nel metodo main del file analyzer.py c'Ã© un if commentato che permette di scartare tutti I data file che hanno meno di CONFIG.buckets linee di dati. Questo valore corrisponde a quello della variabile buckets del file analyzer.properties, dove per default vale 250.

    _Report.java_ class implement report goal.

    Run The Grinder Analyzer that create html reports of log files into log directory *target/test/log_files* 

    This goal can be run independently of the other if exists log files in the log directory.

== Console ==


== TCPProxy ==