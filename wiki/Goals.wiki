= Introduction = 

    The plugin consists of goals:
       * agent
       * report
       * console
       * TCPProxy

   
    The first step of each goal is create plugin configuration directory *target/test/config* (if do not exists) in your Maven project local directory. 

{{{
     ---------------------------
    |  Maven project directory  |
     ---------------------------
                  |
                  |    --------
                  |---| target |
                       --------
                           |
                           |    ------
                           |---| test |
                                ------
                                   |
                                   |    --------
                                   |---| config |
                                        --------
                                            |
                                            |--- grinder_agent.properties
                                            |
                                            |--- jython test
}}}

    Directory contents:
       * *grinder_agent.properties* -- grinder properties configuration;
       * *jython test* -- copy of the jython test recorded by TCPProxy;

== How to run goal ==

    In order to run goal from shell:
       # open a command-line shell;
       # cd into the Maven project directory;
       # execute the command *mvn com.fides:grinderplugin:0.0.1-SNAPSHOT:* followed by goal name;

    For example, to run agent goal use the following command line:
{{{
    mvn com.fides:grinderplugin:0.0.1-SNAPSHOT:agent
}}}

    To run goals on Eclipse platform, set *Run Configuration* of your Maven project creating one Maven build for each goal as follow:
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:agent
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:report
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:console
       * com.fides:grinderplugin:0.0.1-SNAPSHOT:TCPProxy


== Agent goal ==
    
    _Agent.java_ class implement agent goal.

    Create log direcetory *target/test/log_files* and run the grinder agent process that copy here all log files generated.

    This goal can be run independently of the other.

== Report goal ==
Per default, nel metodo main del file analyzer.py c'é un if commentato che permette di scartare tutti I data file che hanno meno di CONFIG.buckets linee di dati. Questo valore corrisponde a quello della variabile buckets del file analyzer.properties, dove per default vale 250.

    _Report.java_ class implement report goal.

    Run The Grinder Analyzer that create html reports of log files into log directory *target/test/log_files* 

    To create HTML reports of data files with a minimun number of data lines:
    * open file grinderplugin/src/main/resources/jython.conf/analyzer.properties
    * set variable *buckets* with the minimun number of data lines for data files
    * open file grinderplugin/src/main/resources/jython/analyzer.py
    * uncomment (deleting # simbol) the follow code of the method *def main():*
{{{
    #           if tail (log_file, CONFIG.buckets+1, ignoreBlankLines=True).__len__() < CONFIG.buckets :  
    #                logger.fatal("")
    #                logger.fatal( "FATAL: insufficient test data to graph. ")
    #                logger.fatal( "grinderplugin/src/main/resources/jython.conf/analyzer.properties specifies")
    #                logger.fatal( "       " + str(CONFIG.buckets) + " buckets, but " + filename + " contains")
    #                logger.fatal( "       less than " + str(CONFIG.buckets) + " data points.")
    #                sys.exit(1)
}}}

    This goal can be run independently of the other if exists log files in the log directory.

== Console goal ==

    _GrinderConsole.java_ class implement console goal.

    Start graphic interface of The Grinder console.

    This goal can be run independently of the other.

== TCPProxy goal ==

    _GrinderTCPProxy.java_ class implement TCPProxy goal.

    Create directory *target/test/tcpproxy* where the TCPProxy save the jython test and start graphic interface of The Grinder TCPProxy. 

    Before to run this goal, set your browser connection settings to specify the TCPProxy as the HTTP proxy. In the browser options dialog, set the proxy host to be the host on which the TCPProxy is running and proxy port.

    The relevant options dialog can be accessed by the following steps:
||    *Browser*      ||        *Steps*                                ||
||      MSIE         || Tools → Internet Options → Connections → Local Area Network Settings || 
|| Mozilla/Netscape  || Edit → Preferences → Advanced → Proxies ||
|| Mozilla/Firefox   || Strumenti → Opzioni → Avanzate → Rete → Configurazione ||
||     Opera         || Tools → Preferences → Advanced → Network → Proxy Servers || 
|| Internet Explorer || Strumenti → Opzioni Internet → Connessioni → Configurazione LAN → Poxy ||

   